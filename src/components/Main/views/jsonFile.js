import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import StarIcon from '@material-ui/icons/Star';
import StarBorderIcon from '@material-ui/icons/StarBorder';
import React from 'react';
import Tooltip from '@material-ui/core/Tooltip';
import Chip from '@material-ui/core/Chip'



const theme = createMuiTheme({
    overrides: {
      // Style sheet name ⚛️
      MuiButton: {
        // Name of the rule
        text: {
          // Some CSS
          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
          borderRadius: 3,
          border: 0,
          color: 'white',
          height: 48,
          padding: '0 30px',
          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
        },
      },
    },
  });



function criticality(str){
    const arr={"very high": 5, "high":4, "medium":3, "low":2, "very low":1, "none":0};
    var stack=[];
    for (let i=0; i<arr[str]; i++){
      stack.push(<StarIcon fontSize="small" />);
    }
    for (let i=arr[str]+1; i<=5; i++){
        stack.push(<StarBorderIcon fontSize="small" />);
    }
    return <div>{stack}</div>;
  }


export const column =[
    { field: 'name', 
    headerName: 'Product',
    flex: 1,
    headerAlign: 'center',
  },
    {
      field: 'tags',
      headerName: 'Tags',
      flex: 1,
      headerAlign: 'center',
      editable: true,
      align:'center',
      renderCell: (params) => {
          if(params.value==""){
            return;
          }
          return <Chip label={params.value} color="primary"></Chip>
          
      }
    },
    {
      field: 'business_criticality',
      headerName: 'Criticality',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
      renderCell: (ele) => (
          <Tooltip title={ele.value} arrow>
              <span>{criticality(ele.value)}</span>
          </Tooltip> 
          ), 
    },
    {
      field: 'product_meta',
      headerName: 'Metadata',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
    {
      field: 'engagements',
      headerName: 'Engagements',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
    {
      field: 'findings_count',
      headerName: 'Active (verified) Findings',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
    {
      field: 'endpoints',
      headerName: 'Endpoints',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
    {
      field: 'contact',
      headerName: 'Contact',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
    {
      field: 'prod_type',
      headerName: 'Product Type',
      flex: 1,
      editable: true,
      headerAlign: 'center',
      align:'center',
    },
  ];
  
  export const row = [
    {
      id: 3,
      findings_count: 8,
      findings_list: [
      356,
      353,
      355,
      354,
      350,
      351,
      348,
      349
      ],
      tags: [ ],
      product_meta: [ ],
      name: "Apple Accounting Software",
      description: 'Accounting software is typically composed of various modules, different sections dealing with particular areas of accounting. Among the most common are: **Core modules** * Accounts receivable—where the company enters money received * Accounts payable—where the company enters its bills and pays money it owes * General ledger—the company\'s "books" * Billing—where the company produces invoices to clients/customers',
      created: null,
      prod_numeric_grade: 100,
      business_criticality: "high",
      platform: "web",
      lifecycle: "production",
      origin: "purchased",
      user_records: 5000,
      revenue: null,
      external_audience: true,
      internet_accessible: false,
      tags_from_django_tagging: "",
      enable_simple_risk_acceptance: false,
      enable_full_risk_acceptance: true,
      product_manager: 1,
      technical_contact: 3,
      team_manager: 3,
      prod_type: 3,
      members: [ ],
      regulations: [5]
      },
      {
        id: 1,
        findings_count: 476,
        findings_list: [
        363,
        459,
        463,
        457,
        364,
        456,
        366,
        458,
        460,
        461,
        362,
        462,
        361,
        360,
        359,
        365,
        628,
        629,
        278,
        177,
        150,
        140,
        464,
        367,
        614,
        444,
        604,
        606,
        605,
        603,
        612,
        600,
        602,
        601,
        443,
        613,
        347,
        309,
        302,
        307,
        145,
        192,
        276,
        197,
        217,
        183,
        151,
        258,
        222,
        195,
        263,
        234,
        189,
        445,
        615,
        559,
        585,
        554,
        582,
        549,
        544,
        579,
        568,
        598,
        616,
        446,
        611,
        1133,
        315,
        330,
        329,
        283,
        288,
        304,
        342,
        314,
        337,
        325,
        324,
        333,
        311,
        310,
        328,
        319,
        318,
        233,
        266,
        170,
        147,
        223,
        214,
        228,
        152,
        207,
        179,
        165,
        184,
        270,
        272,
        209,
        175,
        141,
        199,
        187,
        194,
        200,
        242,
        249,
        182,
        172,
        173,
        156,
        191,
        248,
        166,
        148,
        213,
        265,
        186,
        158,
        224,
        193,
        230,
        167,
        259,
        146,
        188,
        247,
        160,
        274,
        159,
        206,
        220,
        231,
        257,
        277,
        215,
        269,
        508,
        397,
        532,
        411,
        488,
        391,
        491,
        394,
        435,
        494,
        447,
        617,
        501,
        423,
        506,
        421,
        416,
        507,
        413,
        412,
        410,
        509,
        510,
        404,
        409,
        403,
        513,
        518,
        400,
        520,
        396,
        522,
        525,
        526,
        393,
        390,
        386,
        382,
        381,
        380,
        534,
        377,
        535,
        375,
        537,
        538,
        392,
        472,
        474,
        477,
        478,
        487,
        479,
        483,
        489,
        490,
        493,
        497,
        500,
        441,
        440,
        438,
        437,
        429,
        428,
        425,
        455,
        625,
        450,
        620,
        454,
        624,
        452,
        622,
        453,
        623,
        398,
        399,
        528,
        495,
        496,
        433,
        431,
        430,
        426,
        527,
        503,
        504,
        415,
        512,
        523,
        406,
        407,
        530,
        599,
        521,
        424,
        492,
        368,
        465,
        395,
        451,
        621,
        448,
        618,
        470,
        536,
        402,
        524,
        516,
        419,
        427,
        378,
        376,
        499,
        373,
        439,
        476,
        379,
        475,
        473,
        607,
        608,
        511,
        417,
        371,
        420,
        414,
        408,
        529,
        502,
        531,
        515,
        514,
        468,
        469,
        432,
        374,
        434,
        519,
        436,
        498,
        533,
        485,
        370,
        505,
        442,
        369,
        484,
        482,
        481,
        480,
        539,
        517,
        383,
        384,
        471,
        486,
        372,
        418,
        422,
        389,
        401,
        466,
        388,
        467,
        387,
        405,
        385,
        449,
        619,
        557,
        580,
        592,
        594,
        596,
        545,
        547,
        550,
        552,
        555,
        560,
        562,
        564,
        566,
        569,
        571,
        573,
        575,
        577,
        540,
        542,
        583,
        586,
        588,
        590,
        1134,
        1135,
        322,
        335,
        334,
        336,
        332,
        331,
        323,
        316,
        327,
        326,
        317,
        313,
        320,
        321,
        312,
        338,
        300,
        341,
        303,
        292,
        295,
        284,
        229,
        211,
        157,
        240,
        212,
        149,
        154,
        178,
        267,
        190,
        203,
        196,
        185,
        255,
        163,
        174,
        252,
        244,
        273,
        201,
        204,
        251,
        237,
        227,
        250,
        164,
        198,
        271,
        246,
        236,
        238,
        168,
        210,
        245,
        264,
        275,
        144,
        208,
        253,
        254,
        232,
        225,
        161,
        143,
        235,
        181,
        261,
        176,
        256,
        268,
        226,
        219,
        239,
        142,
        216,
        153,
        180,
        202,
        262,
        162,
        241,
        221,
        218,
        169,
        260,
        155,
        205,
        171,
        243,
        610,
        609,
        570,
        581,
        591,
        593,
        595,
        597,
        546,
        548,
        551,
        553,
        556,
        558,
        561,
        563,
        565,
        567,
        572,
        574,
        576,
        578,
        541,
        543,
        584,
        587,
        589,
        358,
        357,
        1136,
        289,
        287,
        297,
        296,
        291,
        285,
        286,
        290,
        293,
        294,
        299,
        298,
        282,
        344,
        306,
        305,
        339,
        301,
        308
        ],
        tags: [
        "retire"
        ],
        product_meta: [ ],
        name: "BodgeIt",
        description: "[Features](https://github.com/psiinon/bodgeit) and characteristics: * Easy to install - just requires java and a servlet engine, e.g. Tomcat * Self contained (no additional dependencies other than to 2 in the above line) * Easy to change on the fly - all the functionality is implemented in JSPs, so no IDE required * Cross platform * Open source * No separate db to install and configure - it uses an 'in memory' db that is automatically (re)initialized on start up",
        created: null,
        prod_numeric_grade: 5,
        business_criticality: "high",
        platform: "web",
        lifecycle: "production",
        origin: "internal",
        user_records: 1000000000,
        revenue: "1000.00",
        external_audience: true,
        internet_accessible: true,
        tags_from_django_tagging: "",
        enable_simple_risk_acceptance: true,
        enable_full_risk_acceptance: false,
        product_manager: 1,
        technical_contact: 3,
        team_manager: 2,
        prod_type: 2,
        members: [ ],
        regulations: [
        13,
        1
        ]
        },
        {
          id: 2,
          findings_count: 5,
          findings_list: [
          3,
          4,
          5,
          6,
          279
          ],
          tags: [ ],
          product_meta: [ ],
          name: "Internal CRM App",
          description: "* New product in development that attempts to follow all best practices",
          created: null,
          prod_numeric_grade: 100,
          business_criticality: 'medium',
          platform: "web",
          lifecycle: "construction",
          origin: "internal",
          user_records: null,
          revenue: null,
          external_audience: false,
          internet_accessible: false,
          tags_from_django_tagging: "",
          enable_simple_risk_acceptance: false,
          enable_full_risk_acceptance: true,
          product_manager: 2,
          technical_contact: 2,
          team_manager: 3,
          prod_type: 2,
          members: [ ],
          regulations: [ ]
          },
          {
            id: 4,
            findings_count: 0,
            findings_list: [ ],
            tags: [ ],
            product_meta: [ ],
            name: "Tenable.io",
            description: "adfadsf",
            created: null,
            prod_numeric_grade: 100,
            business_criticality: null,
            platform: null,
            lifecycle: null,
            origin: null,
            user_records: null,
            revenue: null,
            external_audience: false,
            internet_accessible: false,
            tags_from_django_tagging: "",
            enable_simple_risk_acceptance: false,
            enable_full_risk_acceptance: true,
            product_manager: null,
            technical_contact: null,
            team_manager: null,
            prod_type: 9,
            members: [ ],
            regulations: [ ]
            }
  ];